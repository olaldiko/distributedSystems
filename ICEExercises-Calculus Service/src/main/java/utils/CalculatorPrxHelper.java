// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `calculus.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package utils;

public final class CalculatorPrxHelper extends Ice.ObjectPrxHelperBase implements CalculatorPrx
{
    private static final String __factorial_name = "factorial";

    public int factorial(int num1)
    {
        return factorial(num1, null, false);
    }

    public int factorial(int num1, java.util.Map<String, String> __ctx)
    {
        return factorial(num1, __ctx, true);
    }

    private int factorial(int num1, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__factorial_name);
        return end_factorial(begin_factorial(num1, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_factorial(int num1)
    {
        return begin_factorial(num1, null, false, false, null);
    }

    public Ice.AsyncResult begin_factorial(int num1, java.util.Map<String, String> __ctx)
    {
        return begin_factorial(num1, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_factorial(int num1, Ice.Callback __cb)
    {
        return begin_factorial(num1, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_factorial(int num1, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_factorial(num1, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_factorial(int num1, Callback_Calculator_factorial __cb)
    {
        return begin_factorial(num1, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_factorial(int num1, java.util.Map<String, String> __ctx, Callback_Calculator_factorial __cb)
    {
        return begin_factorial(num1, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_factorial(int num1, 
                                           IceInternal.Functional_IntCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_factorial(num1, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_factorial(int num1, 
                                           IceInternal.Functional_IntCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_factorial(num1, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_factorial(int num1, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_IntCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_factorial(num1, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_factorial(int num1, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_IntCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_factorial(num1, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_factorial(int num1, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.Functional_IntCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_factorial(num1, __ctx, __explicitCtx, __synchronous, 
                               new IceInternal.Functional_TwowayCallbackInt(__responseCb, __exceptionCb, __sentCb)
                                   {
                                       public final void __completed(Ice.AsyncResult __result)
                                       {
                                           CalculatorPrxHelper.__factorial_completed(this, __result);
                                       }
                                   });
    }

    private Ice.AsyncResult begin_factorial(int num1, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__factorial_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__factorial_name, __cb);
        try
        {
            __result.prepare(__factorial_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(num1);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public int end_factorial(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __factorial_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __factorial_completed(Ice.TwowayCallbackInt __cb, Ice.AsyncResult __result)
    {
        utils.CalculatorPrx __proxy = (utils.CalculatorPrx)__result.getProxy();
        int __ret = 0;
        try
        {
            __ret = __proxy.end_factorial(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __gcd_name = "gcd";

    public int gcd(int num1, int num2)
    {
        return gcd(num1, num2, null, false);
    }

    public int gcd(int num1, int num2, java.util.Map<String, String> __ctx)
    {
        return gcd(num1, num2, __ctx, true);
    }

    private int gcd(int num1, int num2, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__gcd_name);
        return end_gcd(begin_gcd(num1, num2, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_gcd(int num1, int num2)
    {
        return begin_gcd(num1, num2, null, false, false, null);
    }

    public Ice.AsyncResult begin_gcd(int num1, int num2, java.util.Map<String, String> __ctx)
    {
        return begin_gcd(num1, num2, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_gcd(int num1, int num2, Ice.Callback __cb)
    {
        return begin_gcd(num1, num2, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_gcd(int num1, int num2, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_gcd(num1, num2, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_gcd(int num1, int num2, Callback_Calculator_gcd __cb)
    {
        return begin_gcd(num1, num2, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_gcd(int num1, int num2, java.util.Map<String, String> __ctx, Callback_Calculator_gcd __cb)
    {
        return begin_gcd(num1, num2, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_gcd(int num1, 
                                     int num2, 
                                     IceInternal.Functional_IntCallback __responseCb, 
                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_gcd(num1, num2, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_gcd(int num1, 
                                     int num2, 
                                     IceInternal.Functional_IntCallback __responseCb, 
                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_gcd(num1, num2, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_gcd(int num1, 
                                     int num2, 
                                     java.util.Map<String, String> __ctx, 
                                     IceInternal.Functional_IntCallback __responseCb, 
                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_gcd(num1, num2, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_gcd(int num1, 
                                     int num2, 
                                     java.util.Map<String, String> __ctx, 
                                     IceInternal.Functional_IntCallback __responseCb, 
                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_gcd(num1, num2, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_gcd(int num1, 
                                      int num2, 
                                      java.util.Map<String, String> __ctx, 
                                      boolean __explicitCtx, 
                                      boolean __synchronous, 
                                      IceInternal.Functional_IntCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_gcd(num1, num2, __ctx, __explicitCtx, __synchronous, 
                         new IceInternal.Functional_TwowayCallbackInt(__responseCb, __exceptionCb, __sentCb)
                             {
                                 public final void __completed(Ice.AsyncResult __result)
                                 {
                                     CalculatorPrxHelper.__gcd_completed(this, __result);
                                 }
                             });
    }

    private Ice.AsyncResult begin_gcd(int num1, 
                                      int num2, 
                                      java.util.Map<String, String> __ctx, 
                                      boolean __explicitCtx, 
                                      boolean __synchronous, 
                                      IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__gcd_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__gcd_name, __cb);
        try
        {
            __result.prepare(__gcd_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(num1);
            __os.writeInt(num2);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public int end_gcd(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __gcd_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __gcd_completed(Ice.TwowayCallbackInt __cb, Ice.AsyncResult __result)
    {
        utils.CalculatorPrx __proxy = (utils.CalculatorPrx)__result.getProxy();
        int __ret = 0;
        try
        {
            __ret = __proxy.end_gcd(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __lcm_name = "lcm";

    public int lcm(int num1, int num2)
    {
        return lcm(num1, num2, null, false);
    }

    public int lcm(int num1, int num2, java.util.Map<String, String> __ctx)
    {
        return lcm(num1, num2, __ctx, true);
    }

    private int lcm(int num1, int num2, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__lcm_name);
        return end_lcm(begin_lcm(num1, num2, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_lcm(int num1, int num2)
    {
        return begin_lcm(num1, num2, null, false, false, null);
    }

    public Ice.AsyncResult begin_lcm(int num1, int num2, java.util.Map<String, String> __ctx)
    {
        return begin_lcm(num1, num2, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_lcm(int num1, int num2, Ice.Callback __cb)
    {
        return begin_lcm(num1, num2, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_lcm(int num1, int num2, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_lcm(num1, num2, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_lcm(int num1, int num2, Callback_Calculator_lcm __cb)
    {
        return begin_lcm(num1, num2, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_lcm(int num1, int num2, java.util.Map<String, String> __ctx, Callback_Calculator_lcm __cb)
    {
        return begin_lcm(num1, num2, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_lcm(int num1, 
                                     int num2, 
                                     IceInternal.Functional_IntCallback __responseCb, 
                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_lcm(num1, num2, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_lcm(int num1, 
                                     int num2, 
                                     IceInternal.Functional_IntCallback __responseCb, 
                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_lcm(num1, num2, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_lcm(int num1, 
                                     int num2, 
                                     java.util.Map<String, String> __ctx, 
                                     IceInternal.Functional_IntCallback __responseCb, 
                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_lcm(num1, num2, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_lcm(int num1, 
                                     int num2, 
                                     java.util.Map<String, String> __ctx, 
                                     IceInternal.Functional_IntCallback __responseCb, 
                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_lcm(num1, num2, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_lcm(int num1, 
                                      int num2, 
                                      java.util.Map<String, String> __ctx, 
                                      boolean __explicitCtx, 
                                      boolean __synchronous, 
                                      IceInternal.Functional_IntCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_lcm(num1, num2, __ctx, __explicitCtx, __synchronous, 
                         new IceInternal.Functional_TwowayCallbackInt(__responseCb, __exceptionCb, __sentCb)
                             {
                                 public final void __completed(Ice.AsyncResult __result)
                                 {
                                     CalculatorPrxHelper.__lcm_completed(this, __result);
                                 }
                             });
    }

    private Ice.AsyncResult begin_lcm(int num1, 
                                      int num2, 
                                      java.util.Map<String, String> __ctx, 
                                      boolean __explicitCtx, 
                                      boolean __synchronous, 
                                      IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__lcm_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__lcm_name, __cb);
        try
        {
            __result.prepare(__lcm_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(num1);
            __os.writeInt(num2);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public int end_lcm(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __lcm_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __lcm_completed(Ice.TwowayCallbackInt __cb, Ice.AsyncResult __result)
    {
        utils.CalculatorPrx __proxy = (utils.CalculatorPrx)__result.getProxy();
        int __ret = 0;
        try
        {
            __ret = __proxy.end_lcm(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    public static CalculatorPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), CalculatorPrx.class, CalculatorPrxHelper.class);
    }

    public static CalculatorPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), CalculatorPrx.class, CalculatorPrxHelper.class);
    }

    public static CalculatorPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), CalculatorPrx.class, CalculatorPrxHelper.class);
    }

    public static CalculatorPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), CalculatorPrx.class, CalculatorPrxHelper.class);
    }

    public static CalculatorPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, CalculatorPrx.class, CalculatorPrxHelper.class);
    }

    public static CalculatorPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, CalculatorPrx.class, CalculatorPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::utils::Calculator"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, CalculatorPrx v)
    {
        __os.writeProxy(v);
    }

    public static CalculatorPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            CalculatorPrxHelper result = new CalculatorPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
