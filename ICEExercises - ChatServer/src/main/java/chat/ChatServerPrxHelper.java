// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `chatServer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package chat;

public final class ChatServerPrxHelper extends Ice.ObjectPrxHelperBase implements ChatServerPrx
{
    private static final String __deleteListener_name = "deleteListener";

    public boolean deleteListener(ListenerPrx listenerInstance)
    {
        return deleteListener(listenerInstance, null, false);
    }

    public boolean deleteListener(ListenerPrx listenerInstance, java.util.Map<String, String> __ctx)
    {
        return deleteListener(listenerInstance, __ctx, true);
    }

    private boolean deleteListener(ListenerPrx listenerInstance, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__deleteListener_name);
        return end_deleteListener(begin_deleteListener(listenerInstance, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_deleteListener(ListenerPrx listenerInstance)
    {
        return begin_deleteListener(listenerInstance, null, false, false, null);
    }

    public Ice.AsyncResult begin_deleteListener(ListenerPrx listenerInstance, java.util.Map<String, String> __ctx)
    {
        return begin_deleteListener(listenerInstance, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_deleteListener(ListenerPrx listenerInstance, Ice.Callback __cb)
    {
        return begin_deleteListener(listenerInstance, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_deleteListener(ListenerPrx listenerInstance, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_deleteListener(listenerInstance, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_deleteListener(ListenerPrx listenerInstance, Callback_ChatServer_deleteListener __cb)
    {
        return begin_deleteListener(listenerInstance, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_deleteListener(ListenerPrx listenerInstance, java.util.Map<String, String> __ctx, Callback_ChatServer_deleteListener __cb)
    {
        return begin_deleteListener(listenerInstance, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_deleteListener(ListenerPrx listenerInstance, 
                                                IceInternal.Functional_BoolCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_deleteListener(listenerInstance, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_deleteListener(ListenerPrx listenerInstance, 
                                                IceInternal.Functional_BoolCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_deleteListener(listenerInstance, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_deleteListener(ListenerPrx listenerInstance, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_BoolCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_deleteListener(listenerInstance, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_deleteListener(ListenerPrx listenerInstance, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_BoolCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_deleteListener(listenerInstance, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_deleteListener(ListenerPrx listenerInstance, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.Functional_BoolCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_deleteListener(listenerInstance, __ctx, __explicitCtx, __synchronous, 
                                    new IceInternal.Functional_TwowayCallbackBool(__responseCb, __exceptionCb, __sentCb)
                                        {
                                            public final void __completed(Ice.AsyncResult __result)
                                            {
                                                ChatServerPrxHelper.__deleteListener_completed(this, __result);
                                            }
                                        });
    }

    private Ice.AsyncResult begin_deleteListener(ListenerPrx listenerInstance, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__deleteListener_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__deleteListener_name, __cb);
        try
        {
            __result.prepare(__deleteListener_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            ListenerPrxHelper.__write(__os, listenerInstance);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_deleteListener(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __deleteListener_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __deleteListener_completed(Ice.TwowayCallbackBool __cb, Ice.AsyncResult __result)
    {
        chat.ChatServerPrx __proxy = (chat.ChatServerPrx)__result.getProxy();
        boolean __ret = false;
        try
        {
            __ret = __proxy.end_deleteListener(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getMessage_name = "getMessage";

    public boolean getMessage(int msgNumber, Ice.StringHolder message)
    {
        return getMessage(msgNumber, message, null, false);
    }

    public boolean getMessage(int msgNumber, Ice.StringHolder message, java.util.Map<String, String> __ctx)
    {
        return getMessage(msgNumber, message, __ctx, true);
    }

    private boolean getMessage(int msgNumber, Ice.StringHolder message, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getMessage_name);
        return end_getMessage(message, begin_getMessage(msgNumber, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getMessage(int msgNumber)
    {
        return begin_getMessage(msgNumber, null, false, false, null);
    }

    public Ice.AsyncResult begin_getMessage(int msgNumber, java.util.Map<String, String> __ctx)
    {
        return begin_getMessage(msgNumber, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getMessage(int msgNumber, Ice.Callback __cb)
    {
        return begin_getMessage(msgNumber, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getMessage(int msgNumber, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getMessage(msgNumber, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getMessage(int msgNumber, Callback_ChatServer_getMessage __cb)
    {
        return begin_getMessage(msgNumber, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getMessage(int msgNumber, java.util.Map<String, String> __ctx, Callback_ChatServer_getMessage __cb)
    {
        return begin_getMessage(msgNumber, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getMessage(int msgNumber, 
                                            FunctionalCallback_ChatServer_getMessage_Response __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getMessage(msgNumber, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getMessage(int msgNumber, 
                                            FunctionalCallback_ChatServer_getMessage_Response __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getMessage(msgNumber, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getMessage(int msgNumber, 
                                            java.util.Map<String, String> __ctx, 
                                            FunctionalCallback_ChatServer_getMessage_Response __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getMessage(msgNumber, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getMessage(int msgNumber, 
                                            java.util.Map<String, String> __ctx, 
                                            FunctionalCallback_ChatServer_getMessage_Response __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getMessage(msgNumber, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getMessage(int msgNumber, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             FunctionalCallback_ChatServer_getMessage_Response __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        class CB extends IceInternal.Functional_TwowayCallback implements _Callback_ChatServer_getMessage
        {
            public CB(FunctionalCallback_ChatServer_getMessage_Response responseCb, 
                      IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb, 
                      IceInternal.Functional_BoolCallback sentCb)
            {
                super(responseCb != null, exceptionCb, sentCb);
                __responseCb = responseCb;
            }

            public void response(boolean __ret, String message)
            {
                if(__responseCb != null)
                {
                    __responseCb.apply(__ret, message);
                }
            }

            public final void __completed(Ice.AsyncResult __result)
            {
                ChatServerPrxHelper.__getMessage_completed(this, __result);
            }

            private final FunctionalCallback_ChatServer_getMessage_Response __responseCb;
        }
        return begin_getMessage(msgNumber, __ctx, __explicitCtx, __synchronous, new CB(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_getMessage(int msgNumber, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getMessage_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getMessage_name, __cb);
        try
        {
            __result.prepare(__getMessage_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(msgNumber);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_getMessage(Ice.StringHolder message, Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getMessage_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            message.value = __is.readString();
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getMessage_completed(_Callback_ChatServer_getMessage __cb, Ice.AsyncResult __result)
    {
        chat.ChatServerPrx __proxy = (chat.ChatServerPrx)__result.getProxy();
        boolean __ret = false;
        Ice.StringHolder message = new Ice.StringHolder();
        try
        {
            __ret = __proxy.end_getMessage(message, __result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret, message.value);
    }

    private static final String __pushMessage_name = "pushMessage";

    public void pushMessage(String message, ListenerPrx associatedListener)
    {
        pushMessage(message, associatedListener, null, false);
    }

    public void pushMessage(String message, ListenerPrx associatedListener, java.util.Map<String, String> __ctx)
    {
        pushMessage(message, associatedListener, __ctx, true);
    }

    private void pushMessage(String message, ListenerPrx associatedListener, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_pushMessage(begin_pushMessage(message, associatedListener, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_pushMessage(String message, ListenerPrx associatedListener)
    {
        return begin_pushMessage(message, associatedListener, null, false, false, null);
    }

    public Ice.AsyncResult begin_pushMessage(String message, ListenerPrx associatedListener, java.util.Map<String, String> __ctx)
    {
        return begin_pushMessage(message, associatedListener, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_pushMessage(String message, ListenerPrx associatedListener, Ice.Callback __cb)
    {
        return begin_pushMessage(message, associatedListener, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_pushMessage(String message, ListenerPrx associatedListener, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_pushMessage(message, associatedListener, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_pushMessage(String message, ListenerPrx associatedListener, Callback_ChatServer_pushMessage __cb)
    {
        return begin_pushMessage(message, associatedListener, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_pushMessage(String message, ListenerPrx associatedListener, java.util.Map<String, String> __ctx, Callback_ChatServer_pushMessage __cb)
    {
        return begin_pushMessage(message, associatedListener, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_pushMessage(String message, 
                                             ListenerPrx associatedListener, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_pushMessage(message, associatedListener, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_pushMessage(String message, 
                                             ListenerPrx associatedListener, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_pushMessage(message, associatedListener, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_pushMessage(String message, 
                                             ListenerPrx associatedListener, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_pushMessage(message, associatedListener, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_pushMessage(String message, 
                                             ListenerPrx associatedListener, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_pushMessage(message, associatedListener, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_pushMessage(String message, 
                                              ListenerPrx associatedListener, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.Functional_VoidCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_pushMessage(message, 
                                 associatedListener, 
                                 __ctx, 
                                 __explicitCtx, 
                                 __synchronous, 
                                 new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_pushMessage(String message, 
                                              ListenerPrx associatedListener, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__pushMessage_name, __cb);
        try
        {
            __result.prepare(__pushMessage_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(message);
            ListenerPrxHelper.__write(__os, associatedListener);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_pushMessage(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __pushMessage_name);
    }

    private static final String __registerListener_name = "registerListener";

    public boolean registerListener(ListenerPrx listenerInstance)
    {
        return registerListener(listenerInstance, null, false);
    }

    public boolean registerListener(ListenerPrx listenerInstance, java.util.Map<String, String> __ctx)
    {
        return registerListener(listenerInstance, __ctx, true);
    }

    private boolean registerListener(ListenerPrx listenerInstance, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__registerListener_name);
        return end_registerListener(begin_registerListener(listenerInstance, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_registerListener(ListenerPrx listenerInstance)
    {
        return begin_registerListener(listenerInstance, null, false, false, null);
    }

    public Ice.AsyncResult begin_registerListener(ListenerPrx listenerInstance, java.util.Map<String, String> __ctx)
    {
        return begin_registerListener(listenerInstance, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_registerListener(ListenerPrx listenerInstance, Ice.Callback __cb)
    {
        return begin_registerListener(listenerInstance, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_registerListener(ListenerPrx listenerInstance, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_registerListener(listenerInstance, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_registerListener(ListenerPrx listenerInstance, Callback_ChatServer_registerListener __cb)
    {
        return begin_registerListener(listenerInstance, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_registerListener(ListenerPrx listenerInstance, java.util.Map<String, String> __ctx, Callback_ChatServer_registerListener __cb)
    {
        return begin_registerListener(listenerInstance, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_registerListener(ListenerPrx listenerInstance, 
                                                  IceInternal.Functional_BoolCallback __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_registerListener(listenerInstance, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_registerListener(ListenerPrx listenerInstance, 
                                                  IceInternal.Functional_BoolCallback __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_registerListener(listenerInstance, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_registerListener(ListenerPrx listenerInstance, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_BoolCallback __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_registerListener(listenerInstance, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_registerListener(ListenerPrx listenerInstance, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_BoolCallback __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_registerListener(listenerInstance, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_registerListener(ListenerPrx listenerInstance, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.Functional_BoolCallback __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_registerListener(listenerInstance, __ctx, __explicitCtx, __synchronous, 
                                      new IceInternal.Functional_TwowayCallbackBool(__responseCb, __exceptionCb, __sentCb)
                                          {
                                              public final void __completed(Ice.AsyncResult __result)
                                              {
                                                  ChatServerPrxHelper.__registerListener_completed(this, __result);
                                              }
                                          });
    }

    private Ice.AsyncResult begin_registerListener(ListenerPrx listenerInstance, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__registerListener_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__registerListener_name, __cb);
        try
        {
            __result.prepare(__registerListener_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            ListenerPrxHelper.__write(__os, listenerInstance);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_registerListener(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __registerListener_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __registerListener_completed(Ice.TwowayCallbackBool __cb, Ice.AsyncResult __result)
    {
        chat.ChatServerPrx __proxy = (chat.ChatServerPrx)__result.getProxy();
        boolean __ret = false;
        try
        {
            __ret = __proxy.end_registerListener(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    public static ChatServerPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), ChatServerPrx.class, ChatServerPrxHelper.class);
    }

    public static ChatServerPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), ChatServerPrx.class, ChatServerPrxHelper.class);
    }

    public static ChatServerPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), ChatServerPrx.class, ChatServerPrxHelper.class);
    }

    public static ChatServerPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), ChatServerPrx.class, ChatServerPrxHelper.class);
    }

    public static ChatServerPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, ChatServerPrx.class, ChatServerPrxHelper.class);
    }

    public static ChatServerPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, ChatServerPrx.class, ChatServerPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::chat::ChatServer"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, ChatServerPrx v)
    {
        __os.writeProxy(v);
    }

    public static ChatServerPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ChatServerPrxHelper result = new ChatServerPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
